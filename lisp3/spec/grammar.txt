program
    : import-declaration+ command-or-definition+
    ;

command-or-definition
    : command
    | definition
    | "(" "begin" command-or-definition+ ")"
    ;

definition
    : "(" "define" identifier expression ")"
    | syntax-definition
    | "(" "define-values" formals body ")"
    | "(" "define-record-type" identifier constructor identifier field-spec* ")"
    | "(" "begin" definition* ")"
    ;

def-formals
    : identifier*
    | identifier* "." identifier
    ;

constructor
    : "(" identifier field-name* ")"
    ;

field-spec
    : "(" field-name accessor ")"
    | "(" field-name accessor mutator ")"
    ;

field-name
    : identifier
    ;

accessor
    : identifier

mutator
    : identifier
    ;

syntax-definition
    : "(" "define-syntax" keyword transformer-spec ")"
    ;

/**
  * expressions
  */
expression
    : identifier
    | literal
    | procedure-call
    | lambda-expression
    | conditional
    | assignment
    | derived-expression
    | macro-use
    | macro-block
    | includer
    ;

literal
    : quotation
    | self-evaluating
    ;

self-evaluating
    : boolean
    | number
    | vector
    | character
    | string
    | bytevector
    ;

quotation
    : "'" datum
    | "(" "quote" datum ")"
    ;

procedure
    : "(" operator operand* ")"
    ;

operator
    : expression
    ;

operand
    : expression
    ;

lambda-expression
    : "(" "lambda" formals body ")"
    ;

formals
    : "(" identifier* ")"
    | identifier
    | "(" identifier+ "." identifier ")"
    ;

body
    : definition* sequence
    ;

sequence
    : command* sequence
    ;

command
    : expression
    ;

conditional
    : "(" "if" test consequent alternate ")"
    ;

test
    : expression
    ;

consequent
    : expression
    ;

alternate
    : expression
    | empty
    ;

assignment
    : "(" "set!" identifier expression ")"
    ;

derived-expression
    : "(" "cond" cond-clause+ ")"
    | "(" "cond" cond-clause* "(" "else" sequence ")" ")"
    | "(" "case" expression case-clause+ ")"
    | "(" "case" expression case-clause* "(" "else" sequence ")" ")"
    | "(" "case" expression case-clause* "(" "else" "=>" recipient ")" ")"
    | "(" "and" test* ")"
    | "(" "or" test* ")"
    | "(" "when" test sequence ")"
    | "(" "let" "(" binding-spec* ")" body ")"
    | "(" "let*" "(" binding-spec* ")" body ")"
    | "(" "letrec" "(" binding-spec* ")" body ")"
    | "(" "let-values" "(" mv-binding-spec* ")" body ")"
    | "(" "let*-values" "(" mv-binding-spec* ")" body ")"
    | "(" "begin" sequence ")"
    | "(" "do" "(" iteration-spec* ")" "(" test do-result ")" command* ")"
    | "(" "delay" expression ")"
    | "(" "delay-force" expression ")"
    | "(" "parameterize" "(" expression expression* ")" body ")"
    | "(" "guard" "(" identifier cond-clause* ")" body ")"
    | quasiquotation
    | "(" "case-lambda" case-lambda-clause* ")"
    ;

cond-clause
    : "(" test sequence ")"
    | "(" test ")"
    | "(" test "=>" recipient ")"
    ;

recipient
    : expression
    ;

case-clause
    : "(" "(" datum* ")" sequence ")"
    | "(" "(" datum* ")" "=>" recipient ")"
    ;

binding-spec
    : "(" identifier expression ")"
    ;

mv-binding-spec
    : "(" formals expression ")"
    ;

iteration-spec
    : "(" identifier init step ")"
    | "(" identifier init ")"
    ;

case-lambda-clause
    : "(" formal body ")"
    ;

init
    : expression
    ;

step
    : expression
    ;

do-result
    : sequence
    | empty
    ;

macro-use
    : "(" keyword datum* ")"
    ;

keyword
    : identifier
    ;

macro-block
    : "(" "let-syntax" "(" syntax-spec* ")" body ")"
    | "(" "letrec-sytnax" "(" syntax-spec* ")"  body ")"
    ;

syntax-spec
    : "(" keyword transformer-spec ")"
    ;

includer
    : "(" "include" string+ ")"
    | "(" "include-ci" string+ ")"
    ;

/**
  * quasiquotation
  * (D = 1, 2, 3, ..., where D is the nesting depth)
  */
quasiquotation
    : quasiquotation-1
    ;

qq-template-0
    : expression
    ;

quasiquotation-D
    : "`" qq-template-D
    | "(" "quasiquote" qq-template-D ")"
    ;

qq-template-D
    : simple-datum
    | list-qq-template-D
    | vector-qq-template-D
    | unquotation-D
    ;

vector-qq-template-D
    : "(" qq-template-or-splice-D* ")"
    | "(" qq-template-or-splice-D+ "." qq-template-D ")"
    | "'" qq-template-D
    | qausiquotation-D+1
    ;

vector-qq-template-D
    : "#(" qq-template-or-splice-D* ")"
    ;

unquotation-D
    : "," qq-template-D-1
    | "(" "unquote" qq-template-D-1 ")"
    ;

qq-template-or-splice-D
    : qq-template-D
    | splicing-unquotation-D
    ;

splicing-unquotation-D
    : ",@" qq-template-D-1
    | "(" "unquote-splicing" qq-template-D-1 ")"
    ;

/**
  * transformer
  */
transformer-spec
    : "(" "syntax-rules" "(" identifier* ")" syntax-rule* ")"
    | "(" "syntax-rules" identifier "(" identifer* ")" syntax-rule ")"
    ;

syntax-rule
    : "(" pattern template ")"
    ;

pattern
    : pattern-identifier
    | underscore
    | "(" pattern* ")"
    | "(" pattern+ "." pattern ")"
    | "(" pattern* pattern ellipsis pattern* ")"
    | "(" pattern* pattern ellipsis pattern* "." pattern ")"
    | "#(" pattern* ")"
    | "#(" pattern* pattern ellipsis pattern* ")"
    | pattern-datum
    ;

pattern-datum
    : string
    | character
    | boolean
    | number
    ;

template
    : pattern-identifier
    | "(" template-element* ")"
    | "(" template-element+ "." template ")"
    | "#(" template-element* ")"
    | template-datum
    ;

template-element
    : template
    | template ellipsis
    ;

template-datum
    : pattern-datum
    ;

pattern-identifier
    : <any identifier except ...>
    ;

ellipsis
    : <an identifier defaulting to ...>
    ;

underscore
    : <the identifier _>
    ;

/**
  * libraries
  */
library
    : "(" "define-library" library-name library-declaration* ")"
    ;

library-name
    : "(" library-name-part+ ")"
    ;

library-name-part
    : identifier | uinteger-10
    ;

library-declaration
    : "(" "export" export-spec* ")"
    | import-declaration
    | "(" "begin" command-or-definition* ")"
    | includer
    | "(" "include-library-declarations" string+ ")"
    | "(" "cond-expand" cond-expand-clause+ ")"
    | "(" "cond-expand" cond-expand-clause+ "(" "else" library-declaration* ")" ")"
    ;

import-declaration
    : "(" "import" import-set+ ")"
    ;

export-spec
    : identifier
    | "(" "rename" identifier identifier ")"
    ;

import-set
    : library-name
    | "(" "only" import-set identifier+ ")"
    | "(" "except" import-set identifier+ ")"
    | "(" "prefix" import-set identifier ")"
    | "(" "rename" import-set "(" identifier identifier+ ")" ")"
    ;

cond-expand-clause
    : "(" feature-requirement library-declaration* ")"
    ;

feature-requirement
    : identifier
    | library-name
    | "(" "and" feature-requirement* ")"
    | "(" "or" feature-requirement* ")"
    | "(" "not" feature-requirement ")"
    ;
